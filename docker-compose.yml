version: '3.9'
services:
  api:
    build:
      context: ./api
      dockerfile: Dockerfile
    ports:
      - '8000:8000'
    volumes:
      - ./api:/code
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    environment:
      DEBUG: ${DEBUG}
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
    networks:
      - app-network
    tty: true
    stdin_open: true

  db:
    build:
      context: ./db
      dockerfile: Dockerfile
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    ports:
      - '5432:5432'
    networks:
      - app-network
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${DB_USER}']
      interval: 5s
      timeout: 5s
      retries: 5

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - '3001:3001'
    volumes:
      - ./frontend:/app
      - ./frontend/node_modules:/app/node_modules
    networks:
      - app-network

  redis:
    image: redis:7
    ports:
      - '6380:6379'
    volumes:
      - redis_data:/data
    networks:
      - app-network

volumes:
  redis_data:
  postgres_data:

networks:
  app-network:
    driver: bridge
